# Generated by Django 5.2.5 on 2025-08-18 21:58

import django.core.validators
import django.db.models.deletion
import django.db.models.functions.text
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='LobbyBan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(blank=True, max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lobby_bans', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LobbyRoom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=12, unique=True, verbose_name='join code')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('paused', 'Paused'), ('ended', 'Ended')], default='pending', max_length=16)),
                ('question_started_at', models.DateTimeField(blank=True, null=True)),
                ('question_duration', models.PositiveIntegerField(blank=True, null=True)),
                ('is_paused', models.BooleanField(default=False)),
                ('is_private', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('banned_users', models.ManyToManyField(blank=True, related_name='banned_from_lobbies', through='game.LobbyBan', to=settings.AUTH_USER_MODEL)),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hosted_lobbies', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LobbyParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nickname', models.CharField(max_length=32)),
                ('is_host', models.BooleanField(default=False)),
                ('session_id', models.CharField(blank=True, help_text='Opaque session/connection identifier', max_length=64)),
                ('connected', models.BooleanField(default=False)),
                ('last_seen', models.DateTimeField(default=django.utils.timezone.now)),
                ('score', models.IntegerField(default=0)),
                ('rank', models.PositiveIntegerField(blank=True, null=True)),
                ('state', models.JSONField(blank=True, default=dict, help_text='Reconnection snapshot')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('left_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lobby_participations', to=settings.AUTH_USER_MODEL)),
                ('lobby', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='game.lobbyroom')),
            ],
            options={
                'ordering': ['-score', 'joined_at'],
            },
        ),
        migrations.AddField(
            model_name='lobbyban',
            name='lobby',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bans', to='game.lobbyroom'),
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('mcq', 'Multiple choice'), ('tf', 'True/False'), ('short', 'Short text')], max_length=8, verbose_name='type')),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=8, verbose_name='difficulty')),
                ('text', models.TextField(verbose_name='text')),
                ('image', models.ImageField(blank=True, null=True, upload_to='question_images/', verbose_name='image')),
                ('content', models.JSONField(blank=True, default=dict, verbose_name='content')),
                ('answer_key', models.JSONField(blank=True, default=dict, verbose_name='answer key')),
                ('default_timer_seconds', models.PositiveIntegerField(default=20, validators=[django.core.validators.MinValueValidator(3), django.core.validators.MaxValueValidator(600)])),
                ('default_points', models.PositiveIntegerField(default=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='questions', to=settings.AUTH_USER_MODEL)),
                ('tags', models.ManyToManyField(blank=True, related_name='questions', to='game.tag', verbose_name='tags')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='title')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('is_published', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quizzes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='lobbyroom',
            name='quiz',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='lobbies', to='game.quiz'),
        ),
        migrations.CreateModel(
            name='QuizQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0)),
                ('points', models.PositiveIntegerField(blank=True, null=True)),
                ('timer_seconds', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(3), django.core.validators.MaxValueValidator(1800)])),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_links', to='game.question')),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_questions', to='game.quiz')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='quiz',
            name='questions',
            field=models.ManyToManyField(related_name='quizzes', through='game.QuizQuestion', to='game.question'),
        ),
        migrations.AddField(
            model_name='lobbyroom',
            name='current_q',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='game.quizquestion'),
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('response_time_ms', models.PositiveIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(3600000)])),
                ('payload', models.JSONField(blank=True, default=dict)),
                ('is_correct', models.BooleanField(default=False)),
                ('points_awarded', models.IntegerField(default=0)),
                ('evaluation', models.JSONField(blank=True, default=dict, help_text='Scoring notes, bonuses, etc.')),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='game.lobbyparticipant')),
                ('lobby', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='game.lobbyroom')),
                ('quiz_question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='game.quizquestion')),
            ],
            options={
                'ordering': ['submitted_at'],
            },
        ),
        migrations.AddField(
            model_name='quiz',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='quizzes', to='game.tag', verbose_name='tags'),
        ),
        migrations.AddConstraint(
            model_name='lobbyparticipant',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('nickname'), models.F('lobby'), name='uq_lobby_nickname_ci_unique'),
        ),
        migrations.AddConstraint(
            model_name='lobbyban',
            constraint=models.UniqueConstraint(fields=('lobby', 'user'), name='uq_lobby_user_ban_unique'),
        ),
        migrations.AddConstraint(
            model_name='quizquestion',
            constraint=models.UniqueConstraint(fields=('quiz', 'question'), name='uq_quiz_question_unique'),
        ),
        migrations.AddConstraint(
            model_name='quizquestion',
            constraint=models.UniqueConstraint(fields=('quiz', 'order'), name='uq_quiz_question_order_unique'),
        ),
        migrations.AddConstraint(
            model_name='answer',
            constraint=models.UniqueConstraint(fields=('participant', 'quiz_question'), name='uq_one_answer_per_question'),
        ),
    ]
